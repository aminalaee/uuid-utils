name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  RUSTFLAGS: "--cfg uuid_unstable"

jobs:
  lint:
    name: Check code quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Check code
        run: |
          black --check .
          isort --check --project=uuid_utils .
          mypy .
          ruff .
  linux:
    name: "Linux: ${{ matrix.target }} Python: ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release -i python${{ matrix.python-version }} --out dist --find-interpreter
          sccache: "true"
          manylinux: auto
      - name: Install uuid_utils
        run: pip install uuid_utils --no-index --find-links dist --force-reinstall
      - name: Run tests
        run: pytest -v .
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    name: "Windows: ${{ matrix.target }} Python: ${{ matrix.python-version }}"
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
          architecture: ${{ matrix.target }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
      - name: Install uuid_utils
        run: pip install uuid_utils --no-index --find-links dist --force-reinstall
      - name: Run tests
        run: pytest -v .
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # macos:
  #   name: "MacOS: ${{ matrix.target }} Python: ${{ matrix.python-version }}"
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       target: [x86_64, aarch64]
  #       python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: "${{ matrix.python-version }}"
  #     - name: Install dependencies
  #       run: pip install -r requirements.txt
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #     - name: Install uuid_utils
  #       run: pip install uuid_utils --no-index --find-links dist --force-reinstall
  #     - name: Run tests
  #       run: pytest -v .
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # sdist:
  #   name: Source Distribution
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Build sdist
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: sdist
  #         args: --out dist
  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [lint, linux, windows, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --skip-existing *

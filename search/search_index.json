{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python UUID Utils","text":"<p>Python UUID implementation using Rust's UUID library. This will make <code>uuid4</code> function around 10x faster.</p> <p>Avaialble UUID versions:</p> <ul> <li><code>uuid1</code> - Version 1 UUIDs using a timestamp and monotonic counter.</li> <li><code>uuid3</code> - Version 3 UUIDs based on the MD5 hash of some data.</li> <li><code>uuid4</code> - Version 4 UUIDs with random data.</li> <li><code>uuid5</code> - Version 5 UUIDs based on the SHA1 hash of some data.</li> <li><code>uuid6</code> - Version 6 UUIDs using a timestamp and monotonic counter.</li> <li><code>uuid7</code> - Version 7 UUIDs using a Unix timestamp ordered by time.</li> <li><code>uuid8</code> - Version 8 UUIDs using user-defined data.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Using <code>pip</code>: <pre><code>$ pip install uuid-utils\n</code></pre> or, using <code>conda</code>:</p> <pre><code>$ conda install -c conda-forge uuid-utils\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>&gt;&gt;&gt; import uuid_utils as uuid\n\n&gt;&gt;&gt; # make a random UUID\n&gt;&gt;&gt; uuid.uuid4()\nUUID('ffe95fcc-b818-4aca-a350-e0a35b9de6ec')\n\n&gt;&gt;&gt; # make a random UUID using a Unix timestamp which is time-ordered.\n&gt;&gt;&gt; uuid.uuid7()\nUUID('018afa4a-0d21-7e6c-b857-012bc678552b')\n\n&gt;&gt;&gt; # make a UUID using a SHA-1 hash of a namespace UUID and a name\n&gt;&gt;&gt; uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')\nUUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')\n\n&gt;&gt;&gt; # make a UUID using an MD5 hash of a namespace UUID and a name\n&gt;&gt;&gt; uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')\nUUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')\n</code></pre>"},{"location":"#compatibility","title":"Compatibility","text":"<p>In some cases, for example if you are using <code>Django</code>, you might need <code>UUID</code> instances to be returned from the standrad-library <code>uuid</code>, not a custom <code>UUID</code> class. In that case you can use the <code>uuid_utils.compat</code> which comes with a performance penalty in comparison with the <code>uuid_utils</code> default behaviour, but is still faster than the standard-library.</p> <pre><code>&gt;&gt;&gt; import uuid_utils.compat as uuid\n\n&gt;&gt;&gt; # make a random UUID\n&gt;&gt;&gt; uuid.uuid4()\nUUID('ffe95fcc-b818-4aca-a350-e0a35b9de6ec')\n</code></pre>"},{"location":"#benchmarks","title":"Benchmarks","text":"Benchmark Min Max Mean Min (+) Max (+) Mean (+) UUID v1 0.061 0.299 0.194 0.019 (3.3x) 0.019 (15.4x) 0.019 (10.1x) UUID v3 0.267 0.307 0.293 0.035 (7.6x) 0.041 (7.5x) 0.039 (7.5x) UUID v4 0.145 0.301 0.249 0.004 (38.5x) 0.005 (54.8x) 0.005 (53.0x) UUID v5 0.058 0.189 0.146 0.008 (7.6x) 0.038 (5.0x) 0.016 (9.0x) UUID from hex 0.128 0.139 0.135 0.016 (8.2x) 0.017 (8.0x) 0.016 (8.3x) UUID from bytes 0.031 0.135 0.093 0.016 (2.0x) 0.016 (8.6x) 0.016 (5.9x) UUID from int 0.027 0.102 0.043 0.003 (8.3x) 0.004 (25.0x) 0.003 (12.4x) UUID from fields 0.031 0.162 0.077 0.005 (6.0x) 0.005 (30.6x) 0.005 (14.7x) <p><sup>Benchmark results might vary in different environments, but in most cases the uuid_utils should outperform stdlib uuid.</sup></p>"},{"location":"#how-to-develop-locally","title":"How to develop locally","text":"<pre><code>$ make build\n$ make test\n</code></pre> <p>Or:</p> <pre><code>$ RUSTFLAGS=\"--cfg uuid_unstable\" maturin develop --release\n</code></pre>"},{"location":"api/","title":"API","text":"<p>class <code>uuid_utils.UUID</code></p> Property Description <code>bytes</code> the UUID as a 16-byte string (containing the six integer fields in big-endian byte order) <code>bytes_le</code> the UUID as a 16-byte string (with time_low, time_mid, and time_hi_version in little-endian byte order) <code>fields</code> a tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes <code>hex</code> the UUID as a 32-character hexadecimal string <code>int</code> the UUID as a 128-bit integer <code>urn</code> the UUID as a URN as specified in RFC 4122 <code>variant</code> the UUID variant (one of the constants RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE) <code>version</code> the UUID version number <code>is_safe</code> An enum indicating whether the UUID has been generated in a way that is safe for multiprocessing applications, via <code>uuid_generate_time_safe(3)</code> <code>timestamp</code> The timestamp of the UUID in milliseconds since epoch. Only works for UUID versions 1, 6 and 7, otherwise raises <code>ValueError</code>. <p>module <code>uuid_utils</code></p> Function Description <code>uuid1</code> Generate a UUID from a host ID, sequence number, and the current time. If <code>node</code> is not given, <code>getnode()</code> is used to obtain the hardware address.  If <code>clock_seq</code> is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen. <code>uuid3</code> Generate a UUID from the MD5 hash of a namespace UUID and a name. <code>uuid4</code> Generate a random UUID. <code>uuid5</code> Generate a UUID from the SHA-1 hash of a namespace UUID and a name. <code>uuid6</code> Generate a version 6 UUID using the given timestamp and a host ID. This is similar to version 1 UUIDs, except that it is lexicographically sortable by timestamp. <code>uuid7</code> Generate a version 7 UUID using a time value and random bytes. <code>uuid8</code> Generate a custom UUID comprised almost entirely of user-supplied bytes. <code>getnode</code> Get the hardware address as a 48-bit positive integer."}]}